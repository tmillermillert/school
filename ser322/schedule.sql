/*
 * 
 * Deliverable 3: Database Implementation

Given the E-R diagram and sets of attributes for each entity, the next step is to convert the E-R model into a relational model and implement the database tables.

Data should be supplied for each table. The amount of data should be such that the application can be tested and demonstrated.
Identify and write a variety of SQL queries to demonstrate the usefulness of your database
 

Deliverables:

Relational Model figure (similar to Assignment 4)
SQL scripts (scripts for creation of the database and tables)
SQL Scripts to load tables with sample data
SQL scripts for most important queries (SELECT queries)
*/
CREATE DATABASE IF NOT EXISTS `scheduler`;
USE `scheduler`;


CREATE TABLE CLIENT (
    CLIENT_ID INTEGER NOT NULL,
    PASSWORD VARCHAR(14),
    EMAIL VARCHAR(50),
    PRIMARY KEY (CLIENT_ID)
);

CREATE TABLE PROJECTOR (
    PROJECTOR_ID INTEGER NOT NULL,
    PRIMARY KEY (PROJECTOR_ID)
);
  
 CREATE TABLE PC (
    PC_ID INTEGER NOT NULL,
    PRIMARY KEY (PC_ID)
);

CREATE TABLE LUNCH_ROOM (
    LUNCH_ROOM_ID INTEGER NOT NULL,
    MAX_TIME INTEGER NOT NULL,
    PRIMARY KEY (LUNCH_ROOM_ID)
);
  
 CREATE TABLE CONFERENCE_ROOM (
    CONFERENCE_ROOM_ID INTEGER NOT NULL,
    MAX_TIME INTEGER NOT NULL,
    PRIMARY KEY (CONFERENCE_ROOM_ID)
);

CREATE TABLE CLIENT_RESERVE_PROJECTOR (
    PROJECTOR_ID INTEGER NOT NULL,
    CLIENT_ID INTEGER NOT NULL,
  	DATE DATE NOT NULL,
  	TIME TIME NOT NULL,
  	LENGTH INTEGER NOT NULL,
    FOREIGN KEY (PROJECTOR_ID) REFERENCES PROJECTOR(PROJECTOR_ID),
		FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(CLIENT_ID),
  	PRIMARY KEY (PROJECTOR_ID, CLIENT_ID, DATE, TIME)
);

CREATE TABLE CLIENT_RESERVE_PC (
    PC_ID INTEGER NOT NULL,
    CLIENT_ID INTEGER NOT NULL,
  	DATE DATE NOT NULL,
  	TIME TIME NOT NULL,
  	LENGTH INTEGER NOT NULL,
    FOREIGN KEY (PC_ID) REFERENCES PC(PC_ID),
		FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(CLIENT_ID),
  	PRIMARY KEY (PC_ID, CLIENT_ID, DATE, TIME)
);

CREATE TABLE CLIENT_RESERVE_LUNCH_ROOM (
    LUNCH_ROOM_ID INTEGER NOT NULL,
    CLIENT_ID INTEGER NOT NULL,
  	DATE DATE NOT NULL,
  	TIME TIME NOT NULL,
  	LENGTH INTEGER NOT  NULL,
    FOREIGN KEY (LUNCH_ROOM_ID) REFERENCES LUNCH_ROOM(LUNCH_ROOM_ID),
		FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(CLIENT_ID),
  	PRIMARY KEY (LUNCH_ROOM_ID, CLIENT_ID, DATE, TIME)
);

CREATE TABLE CLIENT_RESERVE_CONFERENCE_ROOM (
    CONFERENCE_ROOM_ID INTEGER NOT NULL,
    CLIENT_ID INTEGER NOT NULL,
  	DATE DATE NOT NULL,
  	TIME TIME NOT NULL,
  	LENGTH INTEGER NOT  NULL,
    FOREIGN KEY (CONFERENCE_ROOM_ID) REFERENCES CONFERENCE_ROOM(CONFERENCE_ROOM_ID),
		FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(CLIENT_ID),
  	PRIMARY KEY (CONFERENCE_ROOM_ID, CLIENT_ID, DATE, TIME)
);


INSERT INTO CLIENT VALUES 
(1, "Password1", "mtmille5@asu.edu"),
(2, "password", "tmillermillert@gmail.com");


INSERT INTO PROJECTOR VALUES
(1),
(2),
(3),
(4),
(5),
(6);

INSERT INTO PC VALUES
(1),
(2),
(3);

INSERT INTO LUNCH_ROOM VALUES
(1, 120);

INSERT INTO CONFERENCE_ROOM VALUES
(101, 1440),(102, 1440),(103, 1440),(104, 1440),
(201, 1440),(202, 1440),(203, 1440),(204, 1440),
(301, 1440),(302, 1440),(401, 1440),(402, 1440);

INSERT INTO PROJECTOR VALUES
(1),
(2),
(3),
(4),
(5),
(6);

INSERT INTO PC VALUES
(1),
(2),
(3);

INSERT INTO LUNCH_ROOM VALUES
(1, 120);

INSERT INTO CONFERENCE_ROOM VALUES
(101, 1440),(102, 1440),(103, 1440),(104, 1440),
(201, 1440),(202, 1440),(203, 1440),(204, 1440),
(301, 1440),(302, 1440),(401, 1440),(402, 1440);

INSERT INTO CLIENT_RESERVE_PROJECTOR VALUES
(1,1,'2019-05-04','12:00:00',60),
(2,2,'2019-05-04','14:00:00',120),
(4,2,'2019-05-04','14:00:00',120),
(1,1,'2019-05-05','13:30:00',120),
(3,2,'2019-05-06','15:30:00',60);

INSERT INTO CLIENT_RESERVE_PC VALUES
(1,1,'2019-05-04','12:00:00',90),
(1,2,'2019-05-04','14:00:00',120),
(2,2,'2019-05-04','14:00:00',120),
(1,1,'2019-05-05','10:30:00',540),
(2,1,'2019-05-05','10:00:00',120),
(1,1,'2019-05-06','14:30:00',180),
(1,1,'2019-05-07','12:00:00',420),
(2,2,'2019-05-06','10:00:00',540),
(3,2,'2019-05-06','15:30:00',105);


INSERT INTO CLIENT_RESERVE_LUNCH_ROOM VALUES
(1,1,'2019-05-04','12:00:00',90),
(1,2,'2019-05-04','14:00:00',120),
(1,1,'2019-05-05','13:00:00',90),
(1,2,'2019-05-06','15:30:00',60);

INSERT INTO CLIENT_RESERVE_CONFERENCE_ROOM VALUES
(101,1,'2019-05-04','10:00:00',360),
(201,2,'2019-05-04','11:00:00',540),
(101,1,'2019-05-05','10:00:00',540),
(101,1,'2019-05-06','10:00:00',540),
(102,2,'2019-05-06','10:00:00',540),
(101,1,'2019-05-07','10:00:00',540),
(202,2,'2019-05-06','16:30:00',45);
/*-- Select Queries*/

/*-- report of all reseervations for a given day /*Replace ? with Date value in 'YYYY-MM-DD' Value*/
SELECT 'PC' as TYPE, PC.PC_ID as ID, EMAIL, TIME, LENGTH
FROM PC
INNER JOIN CLIENT_RESERVE_PC
	ON PC.PC_ID = CLIENT_RESERVE_PC.PC_ID
INNER JOIN CLIENT
	ON CLIENT_RESERVE_PC.CLIENT_ID = CLIENT.CLIENT_ID
WHERE DATE = ?
UNION
SELECT 'Projector' as TYPE, PROJECTOR.PROJECTOR_ID as ID, EMAIL, TIME, LENGTH
FROM PROJECTOR
INNER JOIN CLIENT_RESERVE_PROJECTOR
	ON PROJECTOR.PROJECTOR_ID = CLIENT_RESERVE_PROJECTOR.PROJECTOR_ID
INNER JOIN CLIENT
	ON CLIENT_RESERVE_PROJECTOR.CLIENT_ID = CLIENT.CLIENT_ID
WHERE DATE = ?
UNION
SELECT 'Conference Room' as TYPE, CONFERENCE_ROOM.CONFERENCE_ROOM_ID as ID, EMAIL, TIME, LENGTH
FROM CONFERENCE_ROOM
INNER JOIN CLIENT_RESERVE_CONFERENCE_ROOM
	ON CONFERENCE_ROOM.CONFERENCE_ROOM_ID = CLIENT_RESERVE_CONFERENCE_ROOM.CONFERENCE_ROOM_ID
INNER JOIN CLIENT
	ON CLIENT_RESERVE_CONFERENCE_ROOM.CLIENT_ID = CLIENT.CLIENT_ID
WHERE DATE = ?
UNION
SELECT 'Lunch Room' as TYPE, LUNCH_ROOM.LUNCH_ROOM_ID as ID, EMAIL, TIME, LENGTH
FROM LUNCH_ROOM
INNER JOIN CLIENT_RESERVE_LUNCH_ROOM
	ON LUNCH_ROOM.LUNCH_ROOM_ID = CLIENT_RESERVE_LUNCH_ROOM.LUNCH_ROOM_ID
INNER JOIN CLIENT
	ON CLIENT_RESERVE_LUNCH_ROOM.CLIENT_ID = CLIENT.CLIENT_ID
WHERE DATE = ?


/* is a given conference room available at a given date and time
-- 'Not available example'*/
SELECT case WHEN count(CONFERENCE_ROOM_ID) >= 1 then 'Not available' else 'Available' end
FROM CLIENT_RESERVE_CONFERENCE_ROOM
WHERE TIME = '12:00:00'
  AND DATE = '2019-05-04'
  AND CONFERENCE_ROOM_ID = 101
/*-- 'Available example'*/
SELECT case WHEN count(CONFERENCE_ROOM_ID) >= 1 then 'Not available' else 'Available' end
FROM CLIENT_RESERVE_CONFERENCE_ROOM
WHERE TIME = '12:00:00'
  AND DATE = '2019-05-04'
  AND CONFERENCE_ROOM_ID = 301


/* what reservations does a specific user have Replace ? with Client ID Value*/
SELECT 'PC' as TYPE, PC.PC_ID as ID, DATE, TIME, LENGTH
FROM PC
INNER JOIN CLIENT_RESERVE_PC
	ON PC.PC_ID = CLIENT_RESERVE_PC.PC_ID
WHERE CLIENT_ID = ?
UNION
SELECT 'Projector' as TYPE, PROJECTOR.PROJECTOR_ID as ID, DATE, TIME, LENGTH
FROM PROJECTOR
INNER JOIN CLIENT_RESERVE_PROJECTOR
	ON PROJECTOR.PROJECTOR_ID = CLIENT_RESERVE_PROJECTOR.PROJECTOR_ID
WHERE CLIENT_ID = ?
UNION
SELECT 'Conference Room' as TYPE, CONFERENCE_ROOM.CONFERENCE_ROOM_ID as ID, DATE, TIME, LENGTH
FROM CONFERENCE_ROOM
INNER JOIN CLIENT_RESERVE_CONFERENCE_ROOM
	ON CONFERENCE_ROOM.CONFERENCE_ROOM_ID = CLIENT_RESERVE_CONFERENCE_ROOM.CONFERENCE_ROOM_ID
WHERE CLIENT_ID = ?
UNION
SELECT 'Lunch Room' as TYPE, LUNCH_ROOM.LUNCH_ROOM_ID as ID, DATE, TIME, LENGTH
FROM LUNCH_ROOM
INNER JOIN CLIENT_RESERVE_LUNCH_ROOM
	ON LUNCH_ROOM.LUNCH_ROOM_ID = CLIENT_RESERVE_LUNCH_ROOM.LUNCH_ROOM_ID
WHERE CLIENT_ID = ?


/* count of booked resources and reserved durations for a span of days (Replace ? with date('YYYY-MM-DD'), date(same date as previous), span of days) */
SELECT TYPE, ID, COUNT(ID) as RESERVATIONS, SUM(LENGTH) as RESERVED_DURATION
FROM (
	SELECT 'PC' as TYPE, PC.PC_ID as ID, EMAIL, DATE, TIME, LENGTH
	FROM PC
  INNER JOIN CLIENT_RESERVE_PC
    ON PC.PC_ID = CLIENT_RESERVE_PC.PC_ID
  INNER JOIN CLIENT
    ON CLIENT_RESERVE_PC.CLIENT_ID = CLIENT.CLIENT_ID
  UNION
  SELECT 'Projector' as TYPE, PROJECTOR.PROJECTOR_ID as ID, EMAIL, DATE, TIME, LENGTH
  FROM PROJECTOR
  INNER JOIN CLIENT_RESERVE_PROJECTOR
    ON PROJECTOR.PROJECTOR_ID = CLIENT_RESERVE_PROJECTOR.PROJECTOR_ID
  INNER JOIN CLIENT
    ON CLIENT_RESERVE_PROJECTOR.CLIENT_ID = CLIENT.CLIENT_ID
  UNION
  SELECT 'Conference Room' as TYPE, CONFERENCE_ROOM.CONFERENCE_ROOM_ID as ID, EMAIL, DATE, TIME, LENGTH
  FROM CONFERENCE_ROOM
  INNER JOIN CLIENT_RESERVE_CONFERENCE_ROOM
    ON CONFERENCE_ROOM.CONFERENCE_ROOM_ID = CLIENT_RESERVE_CONFERENCE_ROOM.CONFERENCE_ROOM_ID
  INNER JOIN CLIENT
    ON CLIENT_RESERVE_CONFERENCE_ROOM.CLIENT_ID = CLIENT.CLIENT_ID
  UNION
  SELECT 'Lunch Room' as TYPE, LUNCH_ROOM.LUNCH_ROOM_ID as ID, EMAIL, DATE, TIME, LENGTH
  FROM LUNCH_ROOM
  INNER JOIN CLIENT_RESERVE_LUNCH_ROOM
    ON LUNCH_ROOM.LUNCH_ROOM_ID = CLIENT_RESERVE_LUNCH_ROOM.LUNCH_ROOM_ID
  INNER JOIN CLIENT
    ON CLIENT_RESERVE_LUNCH_ROOM.CLIENT_ID = CLIENT.CLIENT_ID) as dervied_table
    WHERE DATE>=? AND DATE<=DATE_ADD(?, INTERVAL ? DAY)
GROUP BY TYPE, ID





