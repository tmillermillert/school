//Using UTF DateTime format from 
//https://en.wikipedia.org/wiki/ISO_8601

//Create

USING PERIODIC COMMIT 500


LOAD CSV WITH HEADERS FROM 'file:///BUS_SCHEDULER_MOCK_DATA-BUS.csv' AS line
MERGE (:BUS { BUS_ID: toInteger(line.BUS_ID), CAPACITY: toInteger(line.CAPACITY),
 IS_OPERATIONAL: toBoolean(line.IS_OPERATIONAL)})

LOAD CSV WITH HEADERS FROM 'file:///BUS_SCHEDULER_MOCK_DATA-DRIVER.csv' AS line
MERGE (:DRIVER { DRIVER_ID: toInteger(line.DRIVER_ID), NAME: line.NAME,
 PHONE_NUMBER: toInteger(line.PHONE_NUMBER), SHIFT: line.SHIFT})

LOAD CSV WITH HEADERS FROM 'file:///BUS_SCHEDULER_MOCK_DATA-BUS_STOP.csv' AS line
MERGE (:BUS_STOP { BUS_STOP_ID: toInteger(line.BUS_STOP_ID), LONGITUDE: toInteger(line.LONGITUDE),
 LATITUDE: toInteger(line.LATITUDE)})
 
LOAD CSV WITH HEADERS FROM 'file:///BUS_SCHEDULER_MOCK_DATA-SEGMENT.csv' AS line
MERGE (:SEGMENT { SEGMENT_ID: toInteger(line.SEGMENT_ID), DURATION: toInteger(line.DURATION),
 LENGTH: toInteger(line.LENGTH)})
 
LOAD CSV WITH HEADERS FROM 'file:///BUS_SCHEDULER_MOCK_DATA-PATH.csv' AS line
CREATE (:PATH { PATH_ID: toInteger(line.PATH_ID), DURATION: toInteger(line.DURATION),
 LENGTH: toInteger(line.LENGTH)})

CREATE CONSTRAINT ON (b:BUS) ASSERT b.BUS_ID IS UNIQUE;
CREATE CONSTRAINT ON (d:DRIVER) ASSERT d.DRIVER_ID IS UNIQUE;
CREATE CONSTRAINT ON (bs:BUS_STOP) ASSERT bs.BUS_STOP_ID IS UNIQUE;
CREATE CONSTRAINT ON (s:SEGMENT) ASSERT s.SEGMENT_ID IS UNIQUE;
CREATE CONSTRAINT ON (p:PATH) ASSERT p.PATH_ID IS UNIQUE;

LOAD CSV WITH HEADERS FROM 'file:///BUS_SCHEDULER_MOCK_DATA-DRIVES.csv' AS line
MATCH (d:DRIVER {DRIVER_ID: toInteger(line.DRIVER_ID)})
MATCH (b:BUS {BUS_ID: toInteger(line.BUS_ID)})
MERGE (d)-[:DRIVES {DRIVES_ID: line.DRIVER_ID + line.BUS_ID + line.DATE_TIME,
 DATE_TIME: datetime(line.DATE_TIME)}]->(b)
MERGE (b)-[:DRIVES {DRIVES_ID: line.DRIVER_ID + line.BUS_ID + line.DATE_TIME,
 DATE_TIME: datetime(line.DATE_TIME)}]->(d)
 
LOAD CSV WITH HEADERS FROM 'file:///BUS_SCHEDULER_MOCK_DATA-TAKES.csv' AS line
MATCH (p:PATH {PATH_ID: toInteger(line.PATH_ID)})
MATCH (d:DRIVER {DRIVER_ID: toInteger(line.DRIVER_ID)})
MERGE (d)-[:TAKES {TAKES_ID: line.PATH_ID + line.DRIVER_ID + line.DATE_TIME,
 DATE_TIME: datetime(line.DATE_TIME)}]->(p)
MERGE (p)-[:TAKES {TAKES_ID: line.PATH_ID + line.DRIVER_ID + line.DATE_TIME,
 DATE_TIME: datetime(line.DATE_TIME)}]->(d)
 
LOAD CSV WITH HEADERS FROM 'file:///BUS_SCHEDULER_MOCK_DATA-ON.csv' AS line
MATCH (p:PATH {PATH_ID: toInteger(line.PATH_ID)})
MATCH (b:BUS {BUS_ID: toInteger(line.BUS_ID)})
MERGE (b)-[:ON {ON_ID: line.PATH_ID + line.BUS_ID + line.DATE_TIME,
 DATE_TIME: datetime(line.DATE_TIME)}]->(p)
MERGE (p)-[:ON {ON_ID: line.PATH_ID + line.BUS_ID + line.DATE_TIME,
 DATE_TIME: datetime(line.DATE_TIME)}]->(b)
 
LOAD CSV WITH HEADERS FROM 'file:///BUS_SCHEDULER_MOCK_DATA-MADE_OF.csv' AS line
MATCH (p:PATH {PATH_ID: toInteger(line.PATH_ID)})
MATCH (s:SEGMENT {SEGMENT_ID: toInteger(line.SEGMENT_ID)})
MERGE (p)-[:MADE_OF {MADE_OF_ID: line.PATH_ID + line.SEGMENT_ID + line.SEQUENCE_NUMBER,
 SEQUENCE_NUMBER: toInteger(line.SEQUENCE_NUMBER)}]->(s)
MERGE (s)-[:MADE_OF {MADE_OF_ID: line.PATH_ID + line.SEGMENT_ID + line.SEQUENCE_NUMBER,
 SEQUENCE_NUMBER: toInteger(line.SEQUENCE_NUMBER)}]->(p)
 
LOAD CSV WITH HEADERS FROM 'file:///BUS_SCHEDULER_MOCK_DATA-BETWEEN.csv' AS line
MATCH (bs:BUS_STOP {BUS_STOP_ID: toInteger(line.BUS_STOP_ID)})
MATCH (s:SEGMENT {SEGMENT_ID: toInteger(line.SEGMENT_ID)})
MERGE (bs)-[:BETWEEN {BETWEEN_ID: line.BUS_STOP_ID + line.SEGMENT_ID + line.IS_STARTING_BUS_STOP,
 IS_STARTING_BUS_STOP: toBoolean(line.IS_STARTING_BUS_STOP)}]->(s)
MERGE (s)-[:BETWEEN {BETWEEN_ID: line.BUS_STOP_ID + line.SEGMENT_ID + line.IS_STARTING_BUS_STOP,
 IS_STARTING_BUS_STOP: toBoolean(line.IS_STARTING_BUS_STOP)}]->(bs)
 
 //US46 - Task 66 - Implement methods to pull data on individual buses.
