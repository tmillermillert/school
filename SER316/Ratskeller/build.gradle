import java.text.SimpleDateFormat


plugins {
//    id "com.github.spotbugs" version "2.0.1"
    id 'application'
    id 'java'
    id 'jacoco'
    id 'checkstyle'
}

mainClassName = 'main/java/memoranda/Start'
compileJava.options.encoding = 'UTF-8'

// Repositories and dependencies for code go here
version = '1.0'
repositories {
  jcenter()
  mavenCentral()
}

def neo4jVersion = "3.5.12"

dependencies {
  compile 'com.io7m.xom:xom:1.2.+'
  compile 'net.sourceforge.nekohtml:nekohtml:1.9.+'
  compile 'xml-apis:xml-apis:1.0.b2'
  compile files ('lib/json-20131018.jar')
  compile files ('lib/json-simple-1.1.1.jar')
  compile "org.neo4j:neo4j:${neo4jVersion}"


  // https://mvnrepository.com/artifact/org.graphstream/gs-core
  compile group: 'org.graphstream', name: 'gs-core', version: '1.3'

}

compileJava  {
    doFirst {
        new File("src/main/resources/util/bus.properties").text = """
Version= $version   
Build= ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
"""
    }
}


/////////////////////////////////////////////////////////////////////////
// Configure jar
/////////////////////////////////////////////////////////////////////////

jar {
    manifest {
        attributes "Main-Class": "main.java.memoranda.Start"
    }
 
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


/////////////////////////////////////////////////////////////////////////
// Configure FatJar
/////////////////////////////////////////////////////////////////////////

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'main.java.memoranda.Start'
    }

    archiveBaseName = 'Ratskeller_memoranda'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}



/////////////////////////////////////////////////////////////////////////
// Configure Checkstyle
/////////////////////////////////////////////////////////////////////////

checkstyle {
    configFile(rootProject.file('config/checkstyle/checkstyle.xml'))
    // Keep checkstyle a little quieter
    ignoreFailures = true
    showViolations = false
}

tasks.withType(Checkstyle) {
    reports {
        html.enabled = true
        xml.enabled = false
    }
}
checkstyle {
    toolVersion = "8.8"
}

///////////////////////////////////////////////////////////////////////////
// Configure Jacoco
///////////////////////////////////////////////////////////////////////////

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}


///////////////////////////////////////////////////////////////////////////
// Configure SpotBugs
///////////////////////////////////////////////////////////////////////////

//spotbugs {
//    toolVersion = '4.0.0-beta4'
//}
//// To generate an HTML report instead of XML
//tasks.withType(SpotBugsTask) {
//
//    sourceSets {
//        main {
//            java.srcDirs = ['src/main']
//        }
//    }
//
//    reports {
//        xml.enabled = false
//        html.enabled = true
//    }
//
//}

